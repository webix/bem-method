일반적으로 웹사이트 개발 프로세스는 디자인 및 기술적인요구사항들이 변경되지 않을 것이라는 가정을 기초로 한다.

디자이너, 프론트엔드 개발자, 프로그래머들은 서로에 대한 방해없이 각자의 분야에서 작업한다.

  1. 디자이너는 디자인 레이아웃 형식 안에서 사이트를 디자인한다.
  1. 프론트엔드 개발자는 디자인 레이아웃을 기초로 하여 정적인(static) HTML/CSS를 작성한다.
  1. 프로그래머는 정적인 페이지들을 통하여 템플레이트를 작성하고, 그 다음 스크립트를 작성한다.
  
Such an approach works well only in the case if the website design remains the same
all the time of his life and the changes only add more content.

But usually that is not happening. The website begins to live its own life being constantly
developed. The design of the pages is gradually changing, new pages and new blocks are
being added on them.

If the website source code is not following the defined structure, if its development
is not based on fixes rules, it gradually becomes more and more difficult to maintain.
The website code gets beyond the control of its developers.

In accord to BEM-methodology all the people taking part in the development of the website are
working with a single codebase and are using the same terms to communicate, the same language:
  1. Design of the website can change at any time, we must be ready for this
  2. HTML/CSS code is developing together with the design, ready to its changes
  3. Programmer and front-end developers are working together on the website codebase,
     contributing to each other's code

### The conditions of the methodology emergence
BEM-methodology was developed at [Yandex](http://company.yandex.com) 
while working on a large number of web services, and is aimed to achieve following:

 * Fast-to-develop, long-lived projects  
   It should be possible to develop and launch the first version of a website quickly with an
   architecture that helps to maintain it in the long run.
 * Team scalability  
   Adding new people to a product team should improve speed, not decrease it. We need to be
   able to assign new members to a team without a steep learning curve.  
   Code should be well-structured for a project to remain maintainable over time and
   team changes.
 * Code reuse  
   To maintain UI consistency and minimize development effort on typical interface
   components, those components have to be easily reusable.
   The source code should not have contextual dependency on the other code, it should be
   easy to move that code to another place.

For years we kept looking for solutions to our problems, and at one point they became `BEM methodology`.
